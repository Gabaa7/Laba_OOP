package Lab5.task7;

import java.util.Arrays;
import java.util.Random;
import java.util.Scanner;

public class Task7 {
    public static String[] elements = {"üçí", "üçã", "üçä", "üèÜ", "‚öì"};

    public static void main(String[] args) {
        // 1. –°—Ç–≤–æ—Ä—ñ—Ç—å –æ–±'—î–∫—Ç Scanner –¥–ª—è –∑—á–∏—Ç—É–≤–∞–Ω–Ω—è –≤–≤–µ–¥–µ–Ω–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–µ–º –¥–∞–Ω–∏—Ö.
        Scanner scanner = new Scanner(System.in);

        // 2. –û–≥–æ–ª–æ—Å—ñ—Ç—å –∑–º—ñ–Ω–Ω—ñ –¥–ª—è –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –±–∞–ª–∞–Ω—Å—É, —Å—Ç–∞–≤–∫–∏, –≤–∏–≥—Ä–∞—à—É —Ç–∞ —Ä—è–¥–∫–∞ —Å–∏–º–≤–æ–ª—ñ–≤.
        int balance = 100;
        int bid;
        int win;
        String game;

        // 3. –í–∏–≤–µ–¥—ñ—Ç—å –≤—ñ—Ç–∞–ª—å–Ω–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è —Ç–∞ —Å–ø–∏—Å–æ–∫ –º–æ–∂–ª–∏–≤–∏—Ö —Å–∏–º–≤–æ–ª—ñ–≤.
        System.out.println("–í—ñ—Ç–∞—î–º–æ, –≤–∏ –ø–æ–ø–∞–ª–∏ –≤ –≥—Ä—É '–°–ª–æ—Ç –º–∞—à–∏–Ω–∞' —Ö–∞–π —â–∞—Å—Ç–∏—Ç—å!");
        System.out.println("–í –≥—Ä—ñ –º–æ–∂–µ –±—É—Ç–∏ —Ç–∞–∫—ñ —Å–∏–º–≤–æ–ª–∏:" + Arrays.toString(elements));
        // 4. –ó–∞–ø—É—Å—Ç—ñ—Ç—å —Ü–∏–∫–ª –≥—Ä–∏, –¥–æ–∫–∏ –±–∞–ª–∞–Ω—Å –±—ñ–ª—å—à–µ –Ω—É–ª—è:
        do {
            // - –í–∏–≤–µ–¥—ñ—Ç—å –ø–æ—Ç–æ—á–Ω–∏–π –±–∞–ª–∞–Ω—Å.
            System.out.println("–ü–æ—Ç–æ—á–Ω–∏–π –±–∞–ª–∞–Ω—Å: " + "$" + balance);
            if (balance == 0) {
                System.out.println("–í–∏ –¥–µ–ø–Ω—É–ª–∏ –∫–≤–∞—Ä—Ç–∏—Ä—É, —É –≤–∞—Å –±—ñ–ª—å—à–µ –Ω–µ–º–∞—î –≥—Ä–æ—à–µ–π!");
                return;
            }
            // - –ó–∞–ø–∏—Ç–∞–π—Ç–µ —É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ —Ä–æ–∑–º—ñ—Ä —Å—Ç–∞–≤–∫–∏.
            System.out.print("–Ø–∫—É —Å—Ç–∞–≤–∫—É –∑—Ä–æ–±–∏–º–æ?: ");
            bid = scanner.nextInt();
            scanner.nextLine();
            // - –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ –∫–æ—Ä–µ–∫—Ç–Ω—ñ—Å—Ç—å –≤–≤–µ–¥–µ–Ω–æ—ó —Å—Ç–∞–≤–∫–∏ (–Ω–µ –±—ñ–ª—å—à–µ –±–∞–ª–∞–Ω—Å—É, –ø–æ–Ω–∞–¥ 0).
            if (bid <= 0 || balance < bid) {
                System.out.println("–í–≤–µ–¥–µ–Ω–æ –Ω–µ–≤—ñ—Ä–Ω—É —Å—Ç–∞–≤–∫—É, —Å–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑!");
            }
            // - –í—ñ–¥–Ω—ñ–º—ñ—Ç—å —Å—Ç–∞–≤–∫—É –∑ –±–∞–ª–∞–Ω—Å—É.
            balance -= bid;
            // - –ó–∞–ø—É—Å—Ç—ñ—Ç—å –æ–±–µ—Ä—Ç–∞–Ω–Ω—è –±–∞—Ä–∞–±–∞–Ω—ñ–≤.
            String[] result = spinRow();
            // - –í–∏–≤–µ–¥—ñ—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç –æ–±–µ—Ä—Ç–∞–Ω–Ω—è.
            printRow(result);
            // - –û–±—á–∏—Å–ª—ñ—Ç—å –º–æ–∂–ª–∏–≤–∏–π –≤–∏–≥—Ä–∞—à.
            win = getPayout(result, bid);
            // - –î–æ–¥–∞–π—Ç–µ –≤–∏–≥—Ä–∞—à –¥–æ –±–∞–ª–∞–Ω—Å—É, —è–∫—â–æ –≤—ñ–Ω —î.
            balance += win;
            if (win > 0) {
                System.out.println("–í–∏ –≤–∏–π–≥—Ä–∞–ª–∏ " + win);
            } else {
                System.out.println("–í–∏ –ø—Ä–æ–≥—Ä–∞–ª–∏ " + bid);
            }
            System.out.println("–í–∞—à –±–∞–ª–∞–Ω—Å:" + balance);
            // - –ó–∞–ø–∏—Ç–∞–π—Ç–µ —É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞, —á–∏ —Ö–æ—á–µ –≤—ñ–Ω –ø—Ä–æ–¥–æ–≤–∂–∏—Ç–∏ –≥—Ä—É.
            System.out.println("–í–∏ —Ö–æ—á–µ—Ç–µ –≥—Ä–∞—Ç–∏ —â–µ (yes/no)?");
            game = scanner.nextLine();
        } while (game.equals("yes"));
        // 5. –í–∏–≤–µ–¥—ñ—Ç—å —Ñ—ñ–Ω–∞–ª—å–Ω–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è –≥—Ä–∏.
        System.out.println("–ì—Ä–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞, –ø–æ–≤–µ—Ä—Ç–∞–π—Ç–µ—Å—å —â–µ!");


    }

    /**
     * –ú–µ—Ç–æ–¥ spinRow() - –≥–µ–Ω–µ—Ä—É—î –≤–∏–ø–∞–¥–∫–æ–≤–∏–π —Ä—è–¥–æ–∫ —ñ–∑ —Ç—Ä—å–æ—Ö —Å–∏–º–≤–æ–ª—ñ–≤ –¥–ª—è —Å–ª–æ—Ç–∞.
     *
     * @return –ú–∞—Å–∏–≤ —Ä—è–¥–∫—ñ–≤ —ñ–∑ —Ç—Ä—å–æ–º–∞ –≤–∏–ø–∞–¥–∫–æ–≤–∏–º–∏ —Å–∏–º–≤–æ–ª–∞–º–∏.
     */
    static String[] spinRow() {
        Random random = new Random();
        // 1. –û–≥–æ–ª–æ—Å—ñ—Ç—å –º–∞—Å–∏–≤ –º–æ–∂–ª–∏–≤–∏—Ö —Å–∏–º–≤–æ–ª—ñ–≤.
        // –ì–ª–æ–±–∞–ª—å–Ω–∞ –∑–º—ñ–Ω–Ω–∞ elements
        // 2. –°—Ç–≤–æ—Ä—ñ—Ç—å –Ω–æ–≤–∏–π –º–∞—Å–∏–≤ –¥–ª—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç—É.
        String[] randomElements = new String[3];
        // 3. –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—é—á–∏ –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä –≤–∏–ø–∞–¥–∫–æ–≤–∏—Ö —á–∏—Å–µ–ª, –≤–∏–±–µ—Ä—ñ—Ç—å —Ç—Ä–∏ –≤–∏–ø–∞–¥–∫–æ–≤—ñ —Å–∏–º–≤–æ–ª–∏.
        for (int i = 0; i < 3; i++) {
            randomElements[i] = elements[random.nextInt(elements.length - 1)];
        }
        // 4. –ü–æ–≤–µ—Ä–Ω—ñ—Ç—å –º–∞—Å–∏–≤ –∑ –∑–≥–µ–Ω–µ—Ä–æ–≤–∞–Ω–∏–º–∏ —Å–∏–º–≤–æ–ª–∞–º–∏.
        return randomElements;
    }

    /**
     * –ú–µ—Ç–æ–¥ printRow() - –≤–∏–≤–æ–¥–∏—Ç—å —Ä—è–¥–æ–∫ —Å–∏–º–≤–æ–ª—ñ–≤ —É –≤—ñ–¥—Ñ–æ—Ä–º–∞—Ç–æ–≤–∞–Ω–æ–º—É –≤–∏–≥–ª—è–¥—ñ.
     *
     * @param row –ú–∞—Å–∏–≤ —Ä—è–¥–∫—ñ–≤, —â–æ –º—ñ—Å—Ç–∏—Ç—å —Ç—Ä–∏ —Å–∏–º–≤–æ–ª–∏.
     */
    static void printRow(String[] row) {
        // 1. –í–∏–≤–µ–¥—ñ—Ç—å —Ä–∞–º–∫—É –æ—Ñ–æ—Ä–º–ª–µ–Ω–Ω—è.
        System.out.println("*************");
        // 2. –í–∏–≤–µ–¥—ñ—Ç—å —Ä—è–¥–æ–∫ —Å–∏–º–≤–æ–ª—ñ–≤ —á–µ—Ä–µ–∑ —Ä–æ–∑–¥—ñ–ª—å–Ω–∏–∫ " | ".
        for (int i = 0; i < row.length; i++) {
            System.out.print(row[i]);
            if (i != row.length - 1) {
                System.out.print(" | ");
            }
        }
        // 3. –í–∏–≤–µ–¥—ñ—Ç—å –Ω–∏–∂–Ω—é —á–∞—Å—Ç–∏–Ω—É —Ä–∞–º–∫–∏.
        System.out.println();
        System.out.println("*************");
    }

    /**
     * –ú–µ—Ç–æ–¥ getPayout() - –æ–±—á–∏—Å–ª—é—î –≤–∏–≥—Ä–∞—à –∑–∞–ª–µ–∂–Ω–æ –≤—ñ–¥ –∫–æ–º–±—ñ–Ω–∞—Ü—ñ—ó —Å–∏–º–≤–æ–ª—ñ–≤.
     *
     * @param row –ú–∞—Å–∏–≤ —Ä—è–¥–∫—ñ–≤, —â–æ –º—ñ—Å—Ç–∏—Ç—å —Ç—Ä–∏ —Å–∏–º–≤–æ–ª–∏.
     * @param bet –†–æ–∑–º—ñ—Ä —Å—Ç–∞–≤–∫–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞.
     * @return –°—É–º–∞ –≤–∏–≥—Ä–∞—à—É (–∞–±–æ 0, —è–∫—â–æ –Ω–µ–º–∞—î –∑–±—ñ–≥—É).
     */
    static int getPayout(String[] row, int bet) {
        // 1. –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ, —á–∏ –≤—Å—ñ —Ç—Ä–∏ —Å–∏–º–≤–æ–ª–∏ –æ–¥–Ω–∞–∫–æ–≤—ñ:
        boolean isMatch = true;
        for (int i = 0; i < row.length - 1; i++) {
            if (!row[i].equals(row[i + 1])) {
                isMatch = false;
                break;
            }
        }
        // - –Ø–∫—â–æ —Ç–∞–∫, –ø–æ–≤–µ—Ä–Ω—ñ—Ç—å –≤–∏–≥—Ä–∞—à –∑–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω–∏–π —Å–∏–º–≤–æ–ª (—ñ–∑ –º–Ω–æ–∂–Ω–∏–∫–æ–º).
        if (isMatch) {
            switch (row[0]) {
                case "üçí":
                    return bet * 3;
                case "üçã":
                    return bet * 4;
                case "üçä":
                    return bet * 5;
                case "üèÜ":
                    return bet * 10;
                case "‚öì":
                    return bet * 100;
                default:
                    return 0;
            }
        }
        // 2. –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ, —á–∏ –¥–≤–∞ —ñ–∑ —Ç—Ä—å–æ—Ö —Å–∏–º–≤–æ–ª—ñ–≤ –∑–±—ñ–≥–∞—é—Ç—å—Å—è:
        boolean isMatch2 = false;
        for (int i = 0; i < row.length - 1; i++) {
            for (int j = i + 1; j < row.length; j++) {
                if (row[i].equals(row[j])) {
                    isMatch2 = true;
                    break;
                }
            }
        }
        // - –Ø–∫—â–æ —Ç–∞–∫, –ø–æ–≤–µ—Ä–Ω—ñ—Ç—å –º–µ–Ω—à–∏–π –≤–∏–≥—Ä–∞—à –∑–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω–∏–π —Å–∏–º–≤–æ–ª.
        if (isMatch2) {
            return switch (row[0]) {
                case "üçí" -> bet * 2;
                case "üçã" -> bet * 3;
                case "üçä" -> bet * 4;
                case "üèÜ" -> bet * 5;
                case "‚öì" -> bet * 6;
                default -> 0;
            };
        }
        // 3. –Ø–∫—â–æ –∑–±—ñ–≥—ñ–≤ –Ω–µ–º–∞—î, –ø–æ–≤–µ—Ä–Ω—ñ—Ç—å 0.
        return 0;
    }

}